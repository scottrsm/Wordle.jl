var documenterSearchIndex = {"docs":
[{"location":"#Wordle.jl-Documentation","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"","category":"section"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"CurrentModule = Wordle","category":"page"},{"location":"#Overview","page":"Wordle.jl Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"This module contains a New York Times Wordle solver. It is optimized to solve Wordle puzzles based on most frequently used 5 letter words. It provides the number of steps to solve along with the intermediate guesses.","category":"page"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"There is an associated Wordle Jupyter notebook at  julia/src/WordleTest.ipynb.","category":"page"},{"location":"#Primary-Function","page":"Wordle.jl Documentation","title":"Primary Function","text":"","category":"section"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"solve_wordle","category":"page"},{"location":"#Wordle.solve_wordle","page":"Wordle.jl Documentation","title":"Wordle.solve_wordle","text":"solve_wordle(puzzle_word, universe_df, rec_count, sol_path, last_guess,\n                lfa; <keyword arguments>)\n\nSolves a NYT Wordle puzzle.\n\nBy default, makes guesses based on the most frequently used word in the universe passed in. However, there is an option to pass in a guessing strategy function.\n\nASSUMES: The universe DataFrame is sorted from highest frequency to lowest.\n\nArguments\n\npuzzle_word::String    : The puzzle word.\nuniverse_df::DataFrame : A DataFrame with schema: word(words of the same length),                            freq(freq fraction by use)\nNOTE: The universe is assumed to be sorted in              reverse order by the :freq column.\nrec_count::Int   : The number of calls to this function.\nsol_path::Vector{Any}    : Any containing the current list of guesses:                   [ (guess, exact_info, universe_size) ...]\nlast_guess::String  : The previous guess.\nlfa::Vector{Char}         : The lowercase alphabet listed in frequency-of-use order.\n\nKeyword Arguments\n\nchk_inputs::Bool     : If true, check the input contract.\nguess_strategy::Union{Function,Nothng} : If not nothing, apply this function to pick the next guess.                    If nothing, pick the next guess as the most frequent word                    in the current universe.\nul::Int             : The lower threshold size of the filtered Wordle universe.\nuu::Int             : The upper threshold size of the filtered Wordle universe.\ninit_guess::String     : The starting guess to use.\n\nHere,\n\nexact_info has the form: [(LETTER, POSITION) ...]\nuniverse_size is the size the word list when the guess was made.\nThe guess_strategy is only turned on when the filtered Wordle universe is between the thresholds: ul and uu; otherwise, the default strategy is used – the most frequently used word in the existing filtered Wordle universe is chosen.\n\nInput Contract\n\nuniverse_df schema is (:word, :freq). Define words, freq, and N by:\nwords = universe_df[:words];\nfreq  = universe[:freq];\nN     = |universe|\n∃ m > 0, ∀ i∈[1,N], |words[i]| == m quad (All the words in universe_df have the same length. )\nwords == words[argsort[freq]]       quad (Words are sorted from highest to lowest word usage.)\n\nReturn\n\n(sol_path, number-of-guesses, :SUCCESS/:FAILURE)\n\nNOTE: A sol_path that does not include the puzzle word, means               that at some point after a guess was made – along with               the corresponding filtering of the universe – there was               only one word left. In this case the guess count was               increased by 1, but the function did not recurse.\n\nExamples\n\njulia> solve_wordle(\"taste\"; init_guess=\"their\")\n\n(Any[(String7(\"their\"), [('t', 1), ('e', -3)], 3585), \n     (String7(\"taken\"), [('t', 1), ('a', 2), ('e', -4)], 34), \n     (String7(\"table\"), [('t', 1), ('a', 2), ('e', 5)], 3), \n     (String7(\"taste\"), [('t', 1), ('a', 2), ('s', 3), ('t', 4), ('e', 5)], 2)], 4, :SUCCESS)\n\n\n\n\n\n","category":"function"},{"location":"#Supporting-Functions","page":"Wordle.jl Documentation","title":"Supporting Functions","text":"","category":"section"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"create_wordle_info","category":"page"},{"location":"#Wordle.create_wordle_info","page":"Wordle.jl Documentation","title":"Wordle.create_wordle_info","text":"create_wordle_info(guess, pword)\n\nCreate an information structure of the form:     ([LETTER, EXACT_MATCH_POSITION)], Dict(LETTER => (NUMBER_OF_MATCHES, MATCH_FLAG))\n\nHere, the dictionary has the inexact match information:\n\nLETTER : A matching letter\nEXACT_MATCH_POSITION: The position (1-based index) if an exact match; OR       minus the position if the letter is used, but not at this position.\nNUMBER_OF_MATCHES : The number of matches.\n\nThe latter is interpreted thusly:\n\nIf MATCH_FLAG is 0: There are exactly NUMBER_OF_MATCHES with this                    letter that should occur in the puzzle word.\nElse               There are at least NUMBER_OF_MATCHES with this                    letter that should occur in the puzzle word.\n\nType Constraints\n\nT <: AbstractString\n\nArguments\n\nguess::T: The guess for the puzzle.\npword::T: The puzzle word.\n\nReturns\n\nA tuple of a vector of tuples of exact matches and a dictionary of\ninexact match info.\n\nExamples\n\njulia> create_wordle_info(\"which\", \"where\")\n([('w', 1), ('h', 2)], Dict('h' => (0, 0), 'c' => (0, 0), 'i' => (0, 0)))\n\njulia> create_wordle_info(\"teens\", \"where\")\n([('e', 3)], Dict('n' => (0, 0), 's' => (0, 0), 't' => (0, 0), 'e' => (1, 1)))\n\n\n\n\n\n","category":"function"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"filter_universe","category":"page"},{"location":"#Wordle.filter_universe","page":"Wordle.jl Documentation","title":"Wordle.filter_universe","text":"filter_universe(wordle_info, words)\n\nFilter an existing universe of words based on match info.\n\nType Constraints\n\nT <: AbtractString\n\nArguments\n\nwordle_info : Wordle info of the form:                   ([(LETTER, EXACT_POSITION)], Dict( LETTER => (k, n)))                 The Wordle info – the same type as the return value from                 create_wordle_info.\nwords       : A Vector of words of type T.\n\nReturn\n\nA subset of the `words` vector based on the filter information\nfrom `wordle_info`.\n\nExamples\n\njulia> (winfo, d) = create_wordle_info(\"which\", \"where\")\n\n([('w', 1), ('h', 2)], Dict('h' => (0, 0), 'c' => (0, 0), 'i' => (0, 0)))\n\njulia> words = [\"state\", \"which\", \"where\", \"child\", \"there\", \"taste\"]\n\njulia> filter_universe((winfo, d), words)\n\n1-element Vector{T}:\n \"where\"\n\n\n\n\n\n","category":"function"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"freq_letter_strat","category":"page"},{"location":"#Wordle.freq_letter_strat","page":"Wordle.jl Documentation","title":"Wordle.freq_letter_strat","text":"freq_letter_strat(swords, lfa, c_idx)\n\nStrategy to pick a guess for Wordle.\n\nThe strategy consists of the following:\n\nTake the words in the current universe.\nTake the complement of the indices where we have exact information.     For each of these indices create a dictionary with letter => count.\nPick the index where the corresponding dictionary has the largest count       value for some letter.\nIf for a given dictionary, there are several letters with the same       count, pick the letter from the letter freq string below.\nDo the same now across dictionaries, find the letter that is the most       frequent and its dictionary index.\nFor this index, find all words with this letter in this slot.       Pick the one that is most frequent.       This will be our guess.\n\nType Constraints\n\nT <: AbtractString\n\nArguments\n\nswords::AbstractVector    : A Vector of sorted strings (sorted by frequency of occurrence).\nlfa::Vector{Char}         : This is the alphabet in lower case as a character vector from                               most to least used.\nc_idx::Vector{Int}      : This is the index values of words to analyze.               This list is usually the complement               of exact match indices from a previous guess.\n\nReturn\n\nA guess word.\n\nAssumes\n\nThe characters in swords are lowercase letters: [a-z].\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Wordle.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"Wordle.jl Documentation","title":"Wordle.jl Documentation","text":"","category":"page"}]
}
